import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from ta.trend import SMAIndicator
from ta.momentum import RSIIndicator
import requests
from bs4 import BeautifulSoup
import requests
from bs4 import BeautifulSoup


# Function to format currency values
def filter_tickers(prefix, available_tickers):
    return [ticker for ticker in available_tickers if ticker.startswith(prefix.upper())]

def get_ticker_from_company_name(company_name):
    ticker = None
    url = f"https://finance.yahoo.com/quote/{company_name}"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        ticker = soup.find('meta', property='og:tickersymbol')['content']
    except Exception as e:
        print(f"Error fetching ticker for {company_name}: {e}")
    return ticker

def get_trading_recommendation(stock_history):
    sma_50 = SMAIndicator(close=stock_history['Close'], window=50).sma_indicator()
    sma_200 = SMAIndicator(close=stock_history['Close'], window=200).sma_indicator()
    rsi = RSIIndicator(close=stock_history['Close']).rsi().iloc[-1]

    if sma_50.iloc[-1] > sma_200.iloc[-1] and rsi < 30:
        return "Buy"
    elif sma_50.iloc[-1] < sma_200.iloc[-1] and rsi > 70:
        return "Sell"
    else:
        return "Hold"
def get_stock_news(ticker):
    # Construct Google search URL for stock news
    url = f"https://www.google.com/search?q={ticker}+stock+news"

    # Send HTTP GET request and parse the response
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Extract news articles and their links
    news_articles = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        # Find the parent 'a' tag and retrieve the 'href' attribute (URL)
        link = item.find_parent('a')['href']
        # Remove any unnecessary URL parameters added by Google
        clean_link = clean_google_news_link(link)
        # Append the article title and clean link to the list
        news_articles.append({'title': title, 'link': clean_link})

    return news_articles

def clean_google_news_link(link):
    # Extract the clean URL from the Google search result link
    clean_link = link.split('q=')[1].split('&sa=')[0]
    return clean_link


def get_investor_reports(ticker):
    url = f"https://www.google.com/search?q={ticker}+investor+report"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    reports = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        link = item.find_parent('a')['href']
        clean_link = clean_google_report_link(link)
        reports.append({'title': title, 'link': clean_link})

    return reports

def get_peer_reports(ticker):
    url = f"https://www.google.com/search?q={ticker}+peer+report"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    reports = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        link = item.find_parent('a')['href']
        clean_link = clean_google_report_link(link)
        reports.append({'title': title, 'link': clean_link})

    return reports

def clean_google_report_link(link):
    # Extract the clean URL from the Google search result link
    clean_link = link.split('q=')[1].split('&sa=')[0]
    return clean_link

def format_currency(value):
    if value == 'N/A':
        return value
    else:
        return f"${value:,.2f}"

# Function to format percentage values
def format_percentage(value):
    if value == 'N/A':
        return value
    else:
        return f"{value:.2f}%"

# Function to fetch stock data
def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    data = {
        'Name': info.get('shortName', 'N/A'),

        'Previous Close': format_currency(info.get('previousClose', 'N/A')),
        'Market Cap': format_currency(info.get('marketCap', 'N/A')),
        'Open Price': format_currency(info.get('regularMarketOpen', 'N/A')),
        'Average Price': format_currency(info.get('regularMarketPrice', 'N/A')),
        'Beta (1 year)': info.get('beta', 'N/A'),
        'Bid Price': format_currency(info.get('bid', 'N/A')),
        'Ask Price': format_currency(info.get('ask', 'N/A')),
        'PE Ratio (TTM)': info.get('trailingPE', 'N/A'),
        'EPS (TTM)': format_currency(info.get('trailingEps', 'N/A')),
        "Day's Range": format_currency(info.get('dayLow', 'N/A')) + ' - ' + format_currency(info.get('dayHigh', 'N/A')),
        '52 Week Range': format_currency(info.get('fiftyTwoWeekLow', 'N/A')) + ' - ' + format_currency(info.get('fiftyTwoWeekHigh', 'N/A')),
        '1 Year Target': format_currency(info.get('targetMeanPrice', 'N/A')),
        '52 Week Change (%)': format_percentage(info.get('52WeekChange', 'N/A')),
        'Earnings Date': info.get('earningsDate', 'N/A'),
        'Forward Dividend': format_currency(info.get('forwardDividendRate', 'N/A')),
        'Dividend Yield': format_percentage(info.get('dividendYield', 'N/A')),
        'Volume': info.get('volume', 'N/A'),
        'Ex-Dividend Date': info.get('exDividendDate', 'N/A'),
        'Enterprise Value': format_currency(info.get('enterpriseValue', 'N/A')),
        'Price/Earnings Ratio (Trailing)': info.get('trailingPE', 'N/A'),
        'Price/Earnings Ratio (Forward)': info.get('forwardPE', 'N/A'),
        'PEG Ratio': info.get('pegRatio', 'N/A'),
        'Price/Sales Ratio': info.get('priceToSalesTrailing12Months', 'N/A'),
        'Price/Book Ratio': info.get('priceToBook', 'N/A'),
        '50-Day Moving Average': format_currency(info.get('fiftyDayAverage', 'N/A')),
        '200-Day Moving Average': format_currency(info.get('twoHundredDayAverage', 'N/A')),
        'Enterprise Value/EBITDA': format_currency(info.get('enterpriseToEbitda', 'N/A')),
        'Profit Margin': format_percentage(info.get('profitMargins', 'N/A')),
        'Operating Margin': format_percentage(info.get('operatingMargins', 'N/A')),
        'Return on Assets': format_percentage(info.get('returnOnAssets', 'N/A')),
        'Return on Equity': format_percentage(info.get('returnOnEquity', 'N/A')),
        'Revenue': format_currency(info.get('totalRevenue', 'N/A')),
        'Revenue per Share': format_currency(info.get('revenuePerShare', 'N/A')),
        'Quarterly Revenue Growth': format_percentage(info.get('quarterlyRevenueGrowth', 'N/A')),
        'Gross Profit': format_currency(info.get('grossProfit', 'N/A')),
        'EBITDA': format_currency(info.get('ebitda', 'N/A')),
        'Diluted EPS': format_currency(info.get('trailingEps', 'N/A')),
        'Quarterly Earnings Growth': format_percentage(info.get('earningsQuarterlyGrowth', 'N/A')),
        'Total Cash (MRQ)': format_currency(info.get('totalCash', 'N/A')),
        'Total Cash Per Share (MRQ)': format_currency(info.get('totalCashPerShare', 'N/A')),
        'Total Debt (MRQ)': format_currency(info.get('totalDebt', 'N/A')),
        'Current Ratio (MRQ)': info.get('currentRatio', 'N/A'),
        'Book Value Per Share (MRQ)': format_currency(info.get('bookValue', 'N/A')),
        'Operating Cash Flow (TTM)': format_currency(info.get('operatingCashflow', 'N/A')),
        'Levered Free Cash Flow (TTM)': format_currency(info.get('freeCashflow', 'N/A')),
        'Share Statistics': format_currency(info.get('sharesOutstanding', 'N/A')),
        'Dividends & Splits': info.get('dividendsAndSplits', 'N/A'),
        'About Company': info.get('longBusinessSummary', 'N/A'),

    }
    return data

# Function to fetch historical stock data
def get_stock_data_history(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period='20y')
    return data

# Main function to run the app
def main():
    st.set_page_config(page_title='Stock Analysis App', layout="wide")

    # Custom CSS to set font to Times New Roman
    st.markdown(
        """
        <style>
        body {
            font-family: 'Times New Roman', Times, serif;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.title('Single Stock Data')
    st.sidebar.title('Search')

    # Get user input for ticker symbols
    available_tickers = ["AAPL","AMZN","GOOG","AMAT","AMGN","AAL","ADBE","GOOGL","ADP","AKAM","ATVI","ADSK","WBA","ARNA","ACAD","ALXN","CLMS","AVGO","EA","AMBA","APOL","LULU","AGNC","JBLU","ORLY","ATML","ACOR","ADI","AEGR","ACIW","AMTD","ALTR","ARCC","AGIO","ARLP","AFSI","ALNY","ARMH","ARIA","AINV","ACXM","ACHN","ACET","ABMD","VA","LIFE","ADXS","SAVE","AKRX","ABAX","ASML","DWA","AMCC","CAR","ABCO","JKHY","AVAV","AMKR","ANAC","AEIS","MTGE","CENX","ASPS","AMAG","ALKS","AFFX","ACAT","AAON","VRSK","ALSK","ACTG","ACAS","ATHN","AVHI","ARWR","ANGI","ALGN","GLPI","ARRS","AMCX","RDEN","PAAS","APOG","ANDE","AMSC","AMRS","AMED","ALCO","ADUS","ACTA","AAWW","MDRX","KLIC","AZPN","AHGP","SHLM","GIII","DAVE","AWAY","AREX","ANSS","AMNB","AIXG","ADTN","ACLS","HOLI","BEAV","ATAX","DOX","AVID","ASNA","ARAY","AMBC","ALGT","AIRM","AIMC","ACHC","ABY","TA","MANH","LAMR","ATRO","ATNI","APEI","ANIK","ANGO","AMSG","ALOG","AEGN","ZLTQ","WRLD","UHAL","RJET","CACC","ATSG","ASEI","AROW","ARCB","AMRK","ALRM","AFAM","ACSF","ABGB","USAP","STFC","SEED","BREW","AUDC","ATRI","APIC","AOSL","AMWD","ACGL","ABCB","REXI","RAIL","ARTNA","AGNCP","ADRO","KALU","HOMB","ATLC","AMSWA","AMSF","ALLT","AGYS","CHOP","CCD","AYA","AVNW","AMRI","AMCN","AGII","AEPI","ABCW","SRAQU","OMAB","CRMT","CRESY","ATRA","ATEC","ARLZ","ARII","ANAT","ACRS","ABDC","GABC","EPAX","CACQ","ASFI","ASCMA","ARCP","TEAM","LMIA","FWP","CHY","APLP","AMRB","ADAP","ACTS","PRTS","BRKS","ASYS","AMPH","ADVS","ABUS","FWRD","AGFS","ADNC","ACBI","SCAI","MTGEP","MPAA","AXTI","AVXS","ASTE","ASND","AGIIL","IPCC","FNTCU","CHI","AGNCB","ASMI","ARUN","ARCPP","AMSGP","AIMT","AAAP","NBRV","HDRAU","AVNU","AGFSW","SMACU","FSAM","ECACR","ARWAR","CACGU","AMBCW","BBRY","BIDU","BIIB","BBBY","MNST","FITB","BWLD","PNRA","CNBKA","CBRL","BMRN","HBAN","PDLI","BRCD","BGCP","EGLE","PACB","BKCC","BBEP","BKMU","DNKN","BPOP","PBYI","BOBE","BLUE","NILE","ICON","FIBK","EWBC","BCRX","BCPC","SBGI","BRKR","BOKF","VIVO","ONB","HCBK","COKE","BJRI","BCOR","UBSH","TCBI","SUSQ","SGMO","RRGB","LCUT","IBTX","FFBC","BZUN","BGFV","SASR","NXST","ZION","VRA","SFBS","SBNY","JBSS","JACK","BV","BBOX","TECH","NRIM","NPBC","IBKR","BAMM","NBIX","FMBI","FIVE","CNOB","CALA","SBLK","SBCF","ROLL","HTBI","GBDC","FIZZ","FFKT","FCNCA","BMTC","BLKB","BBSI","BABY","OZRK","COB","CBSH","BUSE","BRKL","BONT","BOJA","BEAT","XBKS","WASH","WABC","UCBI","PPBI","NBTB","MBVT","INBK","CSFL","CSBK","CATY","BOFI","BLMN","BBRG","WIFI","WIBC","LOB","IBCP","FNBC","FARM","EBSB","CCBG","CBNJ","CBF","BIND","BELFB","UBNK","TRST","TOWN","TBNK","SGBK","NWBI","NFBK","MNRO","LBAI","GBT","FBNK","CBPO","BSRR","BSFT","BPFH","BONA","BLDR","BIOS","BDGE","BDE","BCOM","BANF","TRIB","SVA","PFBC","IBOC","GSBC","STBA","SBSI","PLAY","OSBC","LBRDA","KYTH","ISBC","FNLC","BSET","BOOM","BHBK","BCOV","BANR","TCBK","SHBI","NBBC","MBWM","INDB","GBCI","FXCB","FBIZ","EPAY","TCBIP","TBBK","STCK","RCKY","OKSB","MCBC","GBNK","DCOM","BUFF","BOTA","BBEPP","BANX","UBSI","TBK","SNBC","RBCAA","MRLN","HMPR","HAWK","FFIN","COLB","BRLI","BKYF","BBNK","BBCN","PWOD","PMBC","PACW","EVBS","ESSA","BPMC","UBFO","RVSB","PEBO","HWBK","HBCP","GNBC","FCBC","EBTC","BRDR","BPOPN","BFIN","BECN","WTBA","TCBIL","SYBT","METR","FSBK","CBSHP","BPFHW","BNCL","BGNE","BELFA","SUBK","SIBC","LBRDK","HBNC","FITBI","FBNC","BDBD","TCBIW","SBLKL","GEVA","BPOPM","SBNYW","OPB","FFBCW","CATYW","ZIONZ","ZIONW","SBBP","OSBCP","ISM","EQBK","CTBI","BPFHP","BOFIL","BANFP","BITI","HBANP","HBANO","MSFT","INTC","CSCO","CMCSA","SBUX","COST","CATM","NVDA","FTR","CELG","SNDK","SCTY","ETFC","SYMC","DISH","CERN","STX","ESRX","CSX","CTSH","LRCX","CA","SHLD","FAST","WDC","GT","KLAC","CALM","CTXS","LLTC","CME","CHKP","CSIQ","GERN","CSII","SINA","FOXA","KHC","WB","NWSA","CHRW","HAIN","CTRP","CLDX","CINF","CROX","CHTR","SWHC","PSUN","CREE","TECD","SLM","TSCO","SPTN","QLGC","SPWR","CLMT","SANM","CZR","CY","CONN","WEN","PSEC","INCY","CTAS","WBMD","UPL","SONC","ROVI","GNTX","CRUS","PPC","CYOU","CSGS","COLM","CEMP","XONE","MFRM","CYBR","ULTA","CPLA","PDCO","LNCO","JAZZ","CLVS","CCIH","CBOE","OLED","MENT","DEST","CASY","NUAN","MTSC","MSCC","MPEL","FSC","ERIE","CLNE","UTHR","ISIL","INFN","CPLP","ZBRA","UTSI","SIMO","SBAC","NEOG","NAVI","LKQ","LANC","FDML","CDW","SCVL","RPTP","PCH","NTRS","MASI","LMCA","JASO","ISLE","CSGP","CG","CAKE","SNC","SCHL","PRTA","PRGS","ORIT","NWS","MIK","LSCC","IRBT","FOX","DISCA","CAMP","XCRA","SBRA","PRXL","PRSC","OTEX","NCLH","HFWA","HBHC","FLDM","EMMS","CRAY","COHU","UMPQ","RPXC","NDSN","GEOS","ELNK","ECPG","DGAS","CYNO","CAFD","CAC","VICR","SIAL","SATS","RSYS","RECN","POOL","MEOH","LOPE","LINC","IBKC","GPOR","FSTR","DMRC","CSCD","CMCSK","CDK","CASH","VOXX","TAXI","PNNT","ON","MDCO","MANT","LMNX","IXYS","HRZN","HMSY","FNSR","DISCK","CTRN","CSAL","CRZO","CRTO","CPHD","COWN","COMM","CCNE","CAVM","TRMK","TESO","SMCI","ROIC","PRIM","PODD","NATI","LMCK","ISCA","INAP","HWCC","FTD","FMER","FBRC","CYTK","CWCO","CVGW","CTRE","CSOD","CORE","CMCO","CFMS","CDNS","SPNC","SGI","PLCE","PCTY","PCCC","NDLS","KEYW","IPGP","HOFT","HAFC","GNCMA","EFSC","CVLT","CVBF","CNSL","CHKE","CETV","CECO","CCRN","CASS","VWR","UCTT","TRS","THOR","THFF","TFSL","STRL","SNHY","PRSS","NWPX","MATW","LDRH","IRDM","IMMR","GLRE","FELE","FDUS","ELRC","CPRT","CMTL","CCXI","CCOI","WDFC","TW","TICC","SP","SHEN","SGMS","RNST","OTTR","MTRX","IMOS","ICLR","HMHC","GOOD","FULT","FRME","FEIC","CVGI","CSTE","CNMD","CISG","CHEF","CHDN","CHCO","CGNX","VSEC","UMBF","SPIL","SCSS","QUMU","QDEL","PWRD","NTLS","NCMI","HTHT","DCIX","CWST","CVTI","CTWS","CTCM","CRAI","CHMA","CGO","TCRD","TCPC","SRCE","SABR","PMTS","PLXS","PLPC","PGC","OPHT","OCFC","NMRX","MBTF","LNDC","LKFN","KOPN","IART","FRAN","DTLK","CRNT","COHR","CNTF","CMPR","CFFN","ZIXI","YORW","VRTU","SMTC","SLRC","RGEN","MIDD","HURC","GAIN","CYBX","CTRL","CRWN","CPSI","CKEC","CHMG","CHFC","WSTC","WSFS","WIRE","UCFC","SPSC","PBPB","NRCIB","MSEX","MCRI","LORL","LION","LAYN","KZ","HQCL","GLAD","FSRV","ELON","CXRX","CUTR","CONE","COBZ","CHUY","CECE","CDXS","TUES","SFNC","SEIC","RENT","PSTB","PFMT","HTBK","FSFR","FOGO","FDEF","CTG","CRVL","CPTA","COLL","CHSCP","CEVA","CENT","CCMP","UVSP","TAST","SUNS","SSB","PSEM","PKOH","PFIS","PCBK","NATL","LMOS","KRNY","ITRN","INFA","IGTE","GLDD","GARS","FFIC","DWSN","CVCO","CSWC","CPIX","CFNL","CFFI","STLY","SBRAP","PULB","PFLT","OXLC","OFS","NRCIA","NEWP","MCGC","JRJC","JJSF","HCCI","GAINO","FUNC","FSV","FOXF","CTHR","CSUN","CSQ","CRRC","CPHR","COVS","CMFN","CKSW","CENTA","WTFC","WLTW","TGA","SENEB","SENEA","NCOM","MRD","MRCC","LOJN","LMNR","LABL","ITIC","IRCP","GTLS","DLTR","XRAY","ODP","DXCM","DATE","DMND","ODFL","IDTI","DAKT","KTOS","FANG","DMLP","DEPO","DTSI","STLD","DGII","DGICA","SIRO","SIGM","DORM","DXPE","KRNT","DIOD","DFRG","DRNA","DERM","TWIN","TRAK","DXM","DSPG","DSGX","DXLG","DLTH","QQQX","DSKY","DMTX","DHIL","VDTH","UDF","MDM","DISCB","DBVT","DHXM","DGICB","CHW","YERR","EBAY","LINE","EXPE","EXPD","EXEL","ENDP","EQIX","EGHT","EXXI","MCEP","UEIC","MGEE","IEP","ERIC","ECHO","EVEP","PNK","STRA","ERII","ECYT","ENSG","ELGX","ENOC","EBIX","LOCO","EXTR","EXPO","ESGR","EFII","REGI","EIGI","ECOL","PTEN","PETS","EVLV","ENTA","PEGI","LECO","FNGN","EZPW","EXLS","ESLT","EPIQ","EGOV","PERY","PDCE","EXFO","WERN","EXAC","EROC","EMITF","EEFT","SPKE","PLUS","NSIT","MFLX","EHTH","VNOM","ELOS","MGIC","LONG","ETSY","ENTG","EMCI","SYKE","RELL","HEES","FXEN","EXLP","ESND","EPZM","ENVI","RUSHA","EZCH","ESIO","EDIT","SFXE","HTLD","EDGE","SPI","EMMSP","RUSHB","KE","ENZY","FXENP","EBAYL","FB","FSLR","WFM","FFIV","FISV","FLEX","FEYE","FTNT","FLIR","FLWS","PBCT","FOSL","UFCS","SIVB","SFM","UFPI","UNFI","FCS","FARO","TFM","SVVC","FNFG","LPLA","FUEL","KCAP","GIFI","FRGI","FMI","FISI","MBFI","FORM","FINL","FFNW","WSBF","SAFM","MSFG","GSM","FSYS","FRED","FORR","WFD","VIRT","NEWS","NATH","INTL","FPRX","NICK","MOFG","FRSH","WAFD","SNAK","PROV","LTXB","HTLF","FTEK","FORTY","FRPH","FGEN","PNFP","FLXS","SIVBO","HBOS","FUND","FISH","WHF","MNRK","FSCFL","SQBK","INTLL","WTFCM","WHFBL","WAFDW","FTRPR","WSFSL","WTFCW","GILD","MRVL","VOD","PCLN","GMCR","GRPN","GPRO","GRMN","TROW","Z","KNDI","RGLD","GPRE","GLBL","MLNK","GOV","GOLD","JCOM","HCSG","GLUU","MYGN","LBTYA","ULTI","GOGO","HSON","SGEN","ININ","GLNG","GILT","THRM","GSOL","GAME","WMGI","PENN","SIGI","RUTH","QVCA","LBTYK","IILG","VNET","NAVG","PRAA","KTWO","IRG","HMIN","GMLP","GMAN","GHDX","ROCK","PRGX","MOLG","LILA","HUBG","GSIT","GSIG","NWLI","KANG","HCKT","GRFS","WEB","NAME","MYRG","MTCH","LHCG","GK","GBLI","WEYS","GOGL","IGLD","GURE","GASS","CIGI","TRNX","SAFT","LILAK","GOODN","GLPG","HURN","ZG","WWWW","SUTR","LBTYB","JRVR","GAINN","QVCB","GRSHU","GAINP","GLADO","GOODP","GBLIZ","OPK","SIRI","HAS","PYPL","MHLD","HSIC","HA","HZNP","WIN","HIMX","SNH","HOLX","HPT","NIHD","HWKN","HDS","SSNC","RYAAY","HSNI","HSII","MLHR","PICO","HTCH","HSTM","HIBB","TYPE","MKTX","JBHT","SLGN","INOV","HLIT","TTS","MTSI","LGIH","IPCM","HWAY","HMST","IPHS","HTWR","HELE","HDP","MGLN","HALO","TTEC","SPOK","LPNT","INCR","HCOM","HAYN","SPWH","LITE","HQY","TSC","PRAH","LTRPA","ZINC","WLRHU","SHLDW","HCM","HKTV","HDNG","HBHCL","LTRPB","SPNE","PATI","MHLDO","TSLA","YHOO","NFLX","QCOM","MU","REGN","TXN","MAT","SPLS","INO","MAR","VRTX","ZNGA","RLYP","ROST","MDLZ","TMUS","SWKS","ISRG","SRCL","PAYX","MCHP","XLNX","MXIM","URBN","NTAP","INTU","ILMN","PCAR","SRPT","MDVN","ICPT","SOHU","NTES","TERP","TASR","YY","VRSN","VVUS","SWIR","JD","NDAQ","NVAX","VIAB","MDSO","TRIP","WPRT","VIA","RMBS","RCII","PMCS","NYMT","JUNO","PTCT","SYNA","IDXX","PTLA","PCRX","ONTY","TIVO","SNPS","SPPI","QSII","UNTD","PZZA","STMP","RARE","SNI","IDCC","SPLK","SIR","QRVO","OCLR","ZUMZ","YRCW","WWD","VRNT","SAAS","ORIG","MMSI","INFI","IMGN","ZU","TTWO","TTEK","SZYM","QLIK","PLCM","OUTR","MELI","LSTR","UBNT","TUBE","SKYW","SKUL","SIEN","RAVN","ONCE","NTGR","LLNW","WRES","SQNM","SONS","SNCR","SGYP","SFLY","MGPI","MCRB","JAKK","ITRI","IIIN","ZEUS","TXRH","TTPH","KITE","XNPT","TILE","SODA","SHLO","REIS","PLAB","OREX","ORBC","NTCT","MSTR","MPWR","JOBS","IQNT","IPXL","ZFGN","WSBC","TSYS","TSRA","TREE","TNGO","SPAR","RTIX","PTC","PRFT","OMCL","OIIM","NXTM","NUVA","NTK","LYTS","LXRX","LPSN","IRWD","WOOF","TZOO","SEAC","SCLN","SCHN","RP","PGNX","OSIS","MTEX","JOUT","XBIT","WING","SZMK","SEDG","QNST","PSMT","MIND","MGI","LOGM","LNCE","KELYA","INSM","ZAGG","XXIA","VTAE","VSAR","VRTS","TAX","SAIA","RSTI","QLYS","PTIE","PLKI","OVTI","MXWL","MRCY","MORN","MNTA","MIFI","MERC","KVHI","IONS","IMPV","IMKTA","ICFI","VSAT","UPIP","TNAV","SYNT","STRS","SREV","SRDX","POZN","NK","MTSN","MLAB","MKTO","MINI","IIVI","UEPS","TRUE","TRGT","THRX","TEDU","STKL","SHOR","RIGL","QLTI","POWL","PDFS","NTRI","NANO","KPTI","ITCI","ICUI","VIAV","VASC","JIVE","JST","IIJI","JSM","JNP","KMDA","KIRK","KFX","KBAL","KFRC","KURA","KLXI","KELYB","WYNN","VNR","VIP","SSYS","MLNX","MEMP","LGCY","RDWR","WIX","NCTY","TSEM","SHOO","MMLP","PERI","NICE","TRMB","SILC","NVCR","MRTN","ORBK","MCOX","LVNTA","LOGI","LIOX","LAWS","SLAB","LFUS","VNRBP","VNRAP","MMYT","XNET","LMNS","SEMI","MOBI","LQDT","PTXP","PTNR","OXLCO","CCLP","USLM","STNR","RRM","MRKT","LVNTB","VNRCP","NVMI","MIME","MESO","LIVN","LGCYO","OXLCP","OXLCN","LGCYP","MYL","TITN","UTMD","WMAR","VISN","MOMO","MGRC","MGNX","MDCA","MARPS","MYOK","MTLS","MKSI","SMRT","MOBL","MDAS","MCRL","MCHX","MITL","VLGEA","NYMTO","SKLNU","INFO","NYMTP","NXPI","QGEN","NKTR","YNDX","QURE","OFIX","NSSC","NNBR","NTRA","PKT","NCIT","CNV","NUTR","NTRSP","OSUR","OMED","OTIC","OCLSW","OHAI","ONNN","WPPGY","SHPG","QIWI","PCYC","SGNT","POWI","PEGA","ISIS","IPAR","PATK","PHII","SNDX","PHIIK","PVTB","PINC","PCTI","SGRY","CSRE","TECU","PMFG","PVTBP","CLTX","QADA","QADB","SALE","SSRI","RUN","RNWK","RLOC","RNET","RCPT","RELY","RGNX","REMY","STRZA","SCSC","USTR","SYUT","SQI","STB","ISSC","ISSI","VRNS","UACL","SLMAP","SLMBP","STRZB","SRCLP","SRSC","TWOU","TLGT","TSRO","VYGR","VTL","USAK","TRVN","TRIV","TTMI","TESS","CTMX","UTEK","UTIW","UBIC","INVA","TMUSP","VECO","VIAVV","WETF","WILN","WINVV","XOOM","YDLE","ZCVVV","ZAVVV","APSA","ASPX","FNBG","BSDM","CTRX","CBRX","CERCZ","CFRXW","CHSCM","CHSCN","CHSCL","CHSCO","CHYR","CMSB","CTCT","IBKCP","CSWI","CSALV","CSWIV","DRIV","EDS","EOPN","ESBF","EVRY","FCZA","FCZAP","MBFIP","MFIN","GOODO","COWNL","HBNK","HLSS","HPTX","HTWO","IAC","IARTV","IBCA","ICEL","IMI","IMRS","IOSP","IPAS","IRDMB","IVAC","IVAN","KURO","LEVYU","LEVY","LPHI","MWIV","NBTF","NOVB","NPSP","PEOP","PETM","PENX","PRLS","PTRY","RGDO","RNA","RRST","RVBD","SGRH","SIMG","SLXP","TGE","UPI","VIEW","VLCCF","VOLC","VSCI","VTSS","WLBPZ","CHEKU","CNDO","COBK","INGN","INWK","LILKV","LILAV","LITEV","SPNEV"]

    # Get user input
    input_text = st.sidebar.text_input('Enter first three letters of the stock ticker:')
    selected_tickers = st.sidebar.multiselect('Select Tickers', available_tickers)


    for ticker in selected_tickers:
        if st.sidebar.button(f'Get Analysis for {ticker}'):
            # Display interactive chart
            st.subheader(f'Interactive Chart for {ticker}')

            stock_history = get_stock_data_history(ticker)

            # Calculate technical indicators
            sma_50 = SMAIndicator(close=stock_history['Close'], window=50).sma_indicator()
            sma_200 = SMAIndicator(close=stock_history['Close'], window=200).sma_indicator()
            rsi = RSIIndicator(close=stock_history['Close']).rsi()

            # Create candlestick trace
            candlestick = go.Candlestick(x=stock_history.index,
                                         open=stock_history['Open'],
                                         high=stock_history['High'],
                                         low=stock_history['Low'],
                                         close=stock_history['Close'],
                                         name='Candlestick')

            # Create SMA 50 and SMA 200 traces
            sma_50_trace = go.Scatter(x=stock_history.index, y=sma_50, mode='lines', name='SMA 50', line=dict(color='orange'))
            sma_200_trace = go.Scatter(x=stock_history.index, y=sma_200, mode='lines', name='SMA 200', line=dict(color='red'))

            # Create RSI trace
            rsi_trace = go.Scatter(x=stock_history.index, y=rsi, mode='lines', name='RSI', line=dict(color='green'))

            # Combine traces into data list
            data = [candlestick, sma_50_trace, sma_200_trace, rsi_trace]

            # Layout settings
            layout = {
                'title': f'{ticker} Interactive Chart',
                'xaxis_title': 'Date',
                'yaxis_title': 'Price',
                'hovermode': 'x unified'
            }

            # Create figure and plot
            fig = go.Figure(data=data, layout=layout)
            st.plotly_chart(fig)

            # Display stock information
            stock_data = get_stock_data(ticker)
            if stock_data:
                st.subheader(f'Stock Information for {ticker}')
                col1, col2 = st.columns(2)

                for key, value in stock_data.items():
                    col1.write(f"**{key}:**")
                    col2.write(value)

                # Display historical prices
                st.subheader(f'Historical Prices for {ticker}')
                st.write("Please consider $ as your local trading currency")
                st.line_chart(stock_history['Close'])

            stock_news = get_stock_news(ticker)
            if stock_news:
                st.subheader(f'Latest News for {ticker}')
                for article in stock_news:
                    st.markdown(f"[{article['title']}]({article['link']})")


            investor_reports = get_investor_reports(ticker)
            if investor_reports:
                st.subheader(f'Latest Investor Report for {ticker}')
                top_investor_report = investor_reports[0]
                st.markdown(f"[{top_investor_report['title']}]({top_investor_report['link']})")

            # Get peer reports
            peer_reports = get_peer_reports(ticker)
            if peer_reports:
                st.subheader(f'Latest Peer Report for {ticker}')
                top_peer_report = peer_reports[0]
                st.markdown(f"[{top_peer_report['title']}]({top_peer_report['link']})")

            trading_decision = get_trading_recommendation(stock_history)
            st.subheader(f'Technical Analysis Recommendation for {ticker}')
            st.write(f"Suggestion: {trading_decision}")


if __name__ == '__main__':
    main()
