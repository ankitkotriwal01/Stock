import streamlit as st
import yfinance as yf
import pandas as pd
import plotly.graph_objects as go
from ta.trend import SMAIndicator
from ta.momentum import RSIIndicator
import requests
from bs4 import BeautifulSoup
import requests
from bs4 import BeautifulSoup


# Function to format currency values
def filter_tickers(prefix, available_tickers):
    return [ticker for ticker in available_tickers if ticker.startswith(prefix.upper())]

def get_ticker_from_company_name(company_name):
    ticker = None
    url = f"https://finance.yahoo.com/quote/{company_name}"
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        ticker = soup.find('meta', property='og:tickersymbol')['content']
    except Exception as e:
        print(f"Error fetching ticker for {company_name}: {e}")
    return ticker

def get_trading_recommendation(stock_history):
    sma_50 = SMAIndicator(close=stock_history['Close'], window=50).sma_indicator()
    sma_200 = SMAIndicator(close=stock_history['Close'], window=200).sma_indicator()
    rsi = RSIIndicator(close=stock_history['Close']).rsi().iloc[-1]

    if sma_50.iloc[-1] > sma_200.iloc[-1] and rsi < 30:
        return "Buy"
    elif sma_50.iloc[-1] < sma_200.iloc[-1] and rsi > 70:
        return "Sell"
    else:
        return "Hold"
def get_stock_news(ticker):
    # Construct Google search URL for stock news
    url = f"https://www.google.com/search?q={ticker}+stock+news"

    # Send HTTP GET request and parse the response
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Extract news articles and their links
    news_articles = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        # Find the parent 'a' tag and retrieve the 'href' attribute (URL)
        link = item.find_parent('a')['href']
        # Remove any unnecessary URL parameters added by Google
        clean_link = clean_google_news_link(link)
        # Append the article title and clean link to the list
        news_articles.append({'title': title, 'link': clean_link})

    return news_articles

def clean_google_news_link(link):
    # Extract the clean URL from the Google search result link
    clean_link = link.split('q=')[1].split('&sa=')[0]
    return clean_link


def get_investor_reports(ticker):
    url = f"https://www.google.com/search?q={ticker}+investor+report"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    reports = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        link = item.find_parent('a')['href']
        clean_link = clean_google_report_link(link)
        reports.append({'title': title, 'link': clean_link})

    return reports

def get_peer_reports(ticker):
    url = f"https://www.google.com/search?q={ticker}+peer+report"
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')
    reports = []

    for item in soup.find_all('div', class_='BNeawe vvjwJb AP7Wnd'):
        title = item.get_text()
        link = item.find_parent('a')['href']
        clean_link = clean_google_report_link(link)
        reports.append({'title': title, 'link': clean_link})

    return reports

def clean_google_report_link(link):
    # Extract the clean URL from the Google search result link
    clean_link = link.split('q=')[1].split('&sa=')[0]
    return clean_link

def format_currency(value):
    if value == 'N/A':
        return value
    else:
        return f"${value:,.2f}"

# Function to format percentage values
def format_percentage(value):
    if value == 'N/A':
        return value
    else:
        return f"{value:.2f}%"

# Function to fetch stock data
def get_stock_data(ticker):
    stock = yf.Ticker(ticker)
    info = stock.info
    data = {
        'Name': info.get('shortName', 'N/A'),

        'Previous Close': format_currency(info.get('previousClose', 'N/A')),
        'Market Cap': format_currency(info.get('marketCap', 'N/A')),
        'Open Price': format_currency(info.get('regularMarketOpen', 'N/A')),
        'Average Price': format_currency(info.get('regularMarketPrice', 'N/A')),
        'Beta (1 year)': info.get('beta', 'N/A'),
        'Bid Price': format_currency(info.get('bid', 'N/A')),
        'Ask Price': format_currency(info.get('ask', 'N/A')),
        'PE Ratio (TTM)': info.get('trailingPE', 'N/A'),
        'EPS (TTM)': format_currency(info.get('trailingEps', 'N/A')),
        "Day's Range": format_currency(info.get('dayLow', 'N/A')) + ' - ' + format_currency(info.get('dayHigh', 'N/A')),
        '52 Week Range': format_currency(info.get('fiftyTwoWeekLow', 'N/A')) + ' - ' + format_currency(info.get('fiftyTwoWeekHigh', 'N/A')),
        '1 Year Target': format_currency(info.get('targetMeanPrice', 'N/A')),
        '52 Week Change (%)': format_percentage(info.get('52WeekChange', 'N/A')),
        'Earnings Date': info.get('earningsDate', 'N/A'),
        'Forward Dividend': format_currency(info.get('forwardDividendRate', 'N/A')),
        'Dividend Yield': format_percentage(info.get('dividendYield', 'N/A')),
        'Volume': info.get('volume', 'N/A'),
        'Ex-Dividend Date': info.get('exDividendDate', 'N/A'),
        'Enterprise Value': format_currency(info.get('enterpriseValue', 'N/A')),
        'Price/Earnings Ratio (Trailing)': info.get('trailingPE', 'N/A'),
        'Price/Earnings Ratio (Forward)': info.get('forwardPE', 'N/A'),
        'PEG Ratio': info.get('pegRatio', 'N/A'),
        'Price/Sales Ratio': info.get('priceToSalesTrailing12Months', 'N/A'),
        'Price/Book Ratio': info.get('priceToBook', 'N/A'),
        '50-Day Moving Average': format_currency(info.get('fiftyDayAverage', 'N/A')),
        '200-Day Moving Average': format_currency(info.get('twoHundredDayAverage', 'N/A')),
        'Enterprise Value/EBITDA': format_currency(info.get('enterpriseToEbitda', 'N/A')),
        'Profit Margin': format_percentage(info.get('profitMargins', 'N/A')),
        'Operating Margin': format_percentage(info.get('operatingMargins', 'N/A')),
        'Return on Assets': format_percentage(info.get('returnOnAssets', 'N/A')),
        'Return on Equity': format_percentage(info.get('returnOnEquity', 'N/A')),
        'Revenue': format_currency(info.get('totalRevenue', 'N/A')),
        'Revenue per Share': format_currency(info.get('revenuePerShare', 'N/A')),
        'Quarterly Revenue Growth': format_percentage(info.get('quarterlyRevenueGrowth', 'N/A')),
        'Gross Profit': format_currency(info.get('grossProfit', 'N/A')),
        'EBITDA': format_currency(info.get('ebitda', 'N/A')),
        'Diluted EPS': format_currency(info.get('trailingEps', 'N/A')),
        'Quarterly Earnings Growth': format_percentage(info.get('earningsQuarterlyGrowth', 'N/A')),
        'Total Cash (MRQ)': format_currency(info.get('totalCash', 'N/A')),
        'Total Cash Per Share (MRQ)': format_currency(info.get('totalCashPerShare', 'N/A')),
        'Total Debt (MRQ)': format_currency(info.get('totalDebt', 'N/A')),
        'Current Ratio (MRQ)': info.get('currentRatio', 'N/A'),
        'Book Value Per Share (MRQ)': format_currency(info.get('bookValue', 'N/A')),
        'Operating Cash Flow (TTM)': format_currency(info.get('operatingCashflow', 'N/A')),
        'Levered Free Cash Flow (TTM)': format_currency(info.get('freeCashflow', 'N/A')),
        'Share Statistics': format_currency(info.get('sharesOutstanding', 'N/A')),
        'Dividends & Splits': info.get('dividendsAndSplits', 'N/A'),
        'About Company': info.get('longBusinessSummary', 'N/A'),

    }
    return data

# Function to fetch historical stock data
def get_stock_data_history(ticker):
    stock = yf.Ticker(ticker)
    data = stock.history(period='20y')
    return data

# Main function to run the app
def main():
    st.set_page_config(page_title='Stock Analysis App', layout="wide")

    # Custom CSS to set font to Times New Roman
    st.markdown(
        """
        <style>
        body {
            font-family: 'Times New Roman', Times, serif;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    st.title('Single Stock Data')
    st.sidebar.title('Search')

    # Get user input for ticker symbols
    available_tickers = ["ARRY","FOLD","ALDR","ANTH","AMRN","ADES","XLRN","ANCX","AKBA","ACRX","ATRC","ALIM","AIQ","AERI","ADMS","PETX","ARDX","AQXP","ADHD","ACFC","AMOT","NAII","ARTX","AGRX","AAOI","AFOP","SAMG","ARGS","AUPH","ANIP","AGTC","AAVL","AWRE","APPF","AAME","AKAO","NAUH","ANCB","SORL","CMGE","ATAI","ARQL","ARKR","ALOT","PWX","AUBN","ALJJ","AEY","PAHC","ASRVP","ASRV","ASBB","APWC","ABTX","UNAM","EARS","AMTX","AFMD","AXSM","AFH","CACG","GAI","ALLB","AVGR","GNCA","BLCM","BLDP","SONA","BVSN","PBIP","FRBK","EBIO","BWINB","PFBI","PEBK","BKEP","CZWI","BSTC","BSQR","XELB","UBOH","TTOO","MPB","HFBC","GLDI","CLBH","CBAN","BRID","BLBD","UNB","SFST","SBSA","RBPAA","KFFB","GFED","FCCY","CHRS","BWINA","BNFT","WAYN","UCBA","SMBC","ICBK","HEAR","FRBA","CBNK","CBAK","BUR","BSF","TSBK","PNBK","LSBK","LBIO","HBIO","CWBC","CVLY","BCBP","UNTY","SSBI","SBBX","NHTB","BOCH","BKEPP","VBLT","ROKA","NEWT","NBN","MBUU","LARK","FMBH","FBMS","CBMG","MLVF","FGBI","EIGR","BBGI","TBPH","SLVO","OVBC","OLLI","NVET","BLPH","PBMD","CFNB","LABC","TRCB","MGYR","LNBB","RILY","NEWTZ","EBMT","LSBG","BWFG","SLCT","FNWB","EVGBC","CMCT","DRAD","MNKD","XOMA","QUNR","UNIS","CVO","CARA","NLNK","PSDV","CMRX","CERS","CRIS","CNAT","CARB","CAMT","CALD","PRMW","CXDC","CIZN","WINA","SYNL","HCAP","WLB","VIMC","ONEQ","NVIV","MNDO","CYBE","CLCT","CALL","STAA","OMER","MATR","DYAX","CORI","CDTX","STRT","RMCF","LAND","EMKR","CCUR","TWMC","OSHC","KUTV","KTCC","IMDZ","CPSS","CNCE","CDNA","OCC","ITEK","FNHC","EML","DRRX","CLUB","CDZI","VIRC","TOUR","TNXP","QUIK","HYGS","FWM","EGLT","CLLS","CGEN","CERU","CBYL","SNFCA","NGHC","KEQU","HILL","FULL","CPHC","SOCB","PGLC","MHGC","JCS","GPIC","EXA","CSPI","CELGZ","SMTX","GFN","EDUC","CZFC","CRVS","CNFR","CLFD","CLDN","TNDM","NWFL","NVTR","IIN","NVSL","NTIC","NGHCP","IRIX","HFFC","GNMK","DNAI","DXYN","DSWL","DTEA","QLTY","FCEL","ESPR","EGRX","EDAP","ENPH","NYNY","GLDC","EEI","FEIM","XENT","LACO","EAC","EDGW","IESC","HLG","EVGN","EVK","ESCA","ENTL","NYNYR","HOVNP","EVSTC","ENFC","GDEN","EVLMC","HIFS","FRPT","TLF","MFSF","FLXN","FXCM","FATE","FOMX","HALL","FIVN","LWAY","HMNF","FLKS","SPU","FFWM","SIFI","CBFV","MSBF","WLFC","WVFC","ONFC","GFNSL","GFNCP","FULLL","GWPH","III","WLDN","SALM","TINY","GENC","GUID","GRIF","GAIA","WSTG","KONA","GLYC","ZN","SGC","GCVRZ","GKNT","IKGH","HMTV","GOMO","NSEC","NGHCZ","NGHCO","GPP","WMGIZ","OXFD","VIAS","PTX","RDUS","HNSN","HERO","ONVO","HABT","HPJ","RICK","HIIQ","MCFT","VBTX","QCRH","NMIH","LNTH","ISTR","CRBP","SPPRP","SOHO","PIH","INNL","CYHHZ","SOHOL","CDORO","SPPRO","HCAPL","SOHOM","CDORP","OVAS","LGND","ZGNX","NVLS","SCMP","PFPT","RMTI","INSY","IMMU","RGLS","MACK","OSTK","ZSPH","SYNC","RFIL","VNDA","TTGT","SYPR","PRCP","MVIS","TACT","SUPN","OFLX","TRNS","SAGE","OCUL","OCRX","MDGN","JMBA","UG","RVNC","RDNT","NERV","LAKE","VSTM","UPLD","RGCO","PRTK","MFRI","WOWO","KMPH","KTEC","MAGS","LOXO","TATT","LMRK","NVFY","NDRM","LENS","OBAS","MCUR","LMAT","MZOR","STDY","MDWD","QTNT","WVE","QTNTW","MOKO","MNOV","MXPT","SPAN","MOCO","MESG","MB","MRNS","MSON","MERU","MIRN","NVDQ","PRQR","NEOS","NSTG","OSM","XENE","SKIS","PLNR","PCMI","PTI","PXLW","PFIN","ZYNE","SMMT","PTSI","TKAI","CLCD","CATB","PULM","TCON","PRTO","PRGNL","RTRX","RCMT","TSRE","RPD","IDSY","SNMX","SCYX","SSRG","CYAD","TTHI","USAT","VTVT","TRUP","USATP","CYNA","ULBI","VRAY","VCYT","XNCR","CIDM","CNXR","CNSI","IVTY","LMRKP","INTX","INOD"]

    # Get user input
    input_text = st.sidebar.text_input('Enter first three letters of the stock ticker:')
    selected_tickers = st.sidebar.multiselect('Select Tickers', available_tickers)


    for ticker in selected_tickers:
        if st.sidebar.button(f'Get Analysis for {ticker}'):
            # Display interactive chart
            st.subheader(f'Interactive Chart for {ticker}')

            stock_history = get_stock_data_history(ticker)

            # Calculate technical indicators
            sma_50 = SMAIndicator(close=stock_history['Close'], window=50).sma_indicator()
            sma_200 = SMAIndicator(close=stock_history['Close'], window=200).sma_indicator()
            rsi = RSIIndicator(close=stock_history['Close']).rsi()

            # Create candlestick trace
            candlestick = go.Candlestick(x=stock_history.index,
                                         open=stock_history['Open'],
                                         high=stock_history['High'],
                                         low=stock_history['Low'],
                                         close=stock_history['Close'],
                                         name='Candlestick')

            # Create SMA 50 and SMA 200 traces
            sma_50_trace = go.Scatter(x=stock_history.index, y=sma_50, mode='lines', name='SMA 50', line=dict(color='orange'))
            sma_200_trace = go.Scatter(x=stock_history.index, y=sma_200, mode='lines', name='SMA 200', line=dict(color='red'))

            # Create RSI trace
            rsi_trace = go.Scatter(x=stock_history.index, y=rsi, mode='lines', name='RSI', line=dict(color='green'))

            # Combine traces into data list
            data = [candlestick, sma_50_trace, sma_200_trace, rsi_trace]

            # Layout settings
            layout = {
                'title': f'{ticker} Interactive Chart',
                'xaxis_title': 'Date',
                'yaxis_title': 'Price',
                'hovermode': 'x unified'
            }

            # Create figure and plot
            fig = go.Figure(data=data, layout=layout)
            st.plotly_chart(fig)

            # Display stock information
            stock_data = get_stock_data(ticker)
            if stock_data:
                st.subheader(f'Stock Information for {ticker}')
                col1, col2 = st.columns(2)

                for key, value in stock_data.items():
                    col1.write(f"**{key}:**")
                    col2.write(value)

                # Display historical prices
                st.subheader(f'Historical Prices for {ticker}')
                st.write("Please consider $ as your local trading currency")
                st.line_chart(stock_history['Close'])

            stock_news = get_stock_news(ticker)
            if stock_news:
                st.subheader(f'Latest News for {ticker}')
                for article in stock_news:
                    st.markdown(f"[{article['title']}]({article['link']})")


            investor_reports = get_investor_reports(ticker)
            if investor_reports:
                st.subheader(f'Latest Investor Report for {ticker}')
                top_investor_report = investor_reports[0]
                st.markdown(f"[{top_investor_report['title']}]({top_investor_report['link']})")

            # Get peer reports
            peer_reports = get_peer_reports(ticker)
            if peer_reports:
                st.subheader(f'Latest Peer Report for {ticker}')
                top_peer_report = peer_reports[0]
                st.markdown(f"[{top_peer_report['title']}]({top_peer_report['link']})")

            trading_decision = get_trading_recommendation(stock_history)
            st.subheader(f'Technical Analysis Recommendation for {ticker}')
            st.write(f"Suggestion: {trading_decision}")


if __name__ == '__main__':
    main()
